Using in production
===================

By default, Hasura runs in development mode with extremely open permissions. You should NOT use this configuration in production.

Add an access key
------------------

To add an access-key to Hasura, pass the ``--access-key`` flag with a secret generated by you.

Run server in this mode using following docker command:

.. code-block:: bash

   docker run -P -d hasura/graphql-engine:latest graphql-engine \
              --database-url postgres://username:password@host:5432/dbname \
                serve \
                --access-key XXXXXXXXXXXXXXXX

Typically, you will also have a webhook for authentication:

.. code-block:: bash

   docker run -P -d hasura/graphql-engine:latest graphql-engine \
              --database-url postgres://username:password@host:5432/dbname \
                serve \
                --access-key XXXXXXXXXXXXXXXX
                --auth-hook https://myauth.mywebsite.com/user/session-info

Using console with access key
-----------------------------

In the ``my-project/config.yaml`` file set the endpoint:

.. code-block:: yaml

  access_key: XXXXXXXXXXXXXXXX

The console can now contact the GraphQL APIs with the specified Access Key.

The alternate way to pass on the access key value to console would be to pass it as environment variable on runtime.

.. code-block:: bash

  HASURA_GRAPHQL_ACCESS_KEY=xxxxx hasura console

Configure CORS
--------------

By default, all CORS requests are allowed. To run Hasura with more restrictive CORS settings, use the ``--cors-domain`` flag.

For example:

.. code-block:: bash

   docker run -P -d hasura/graphql-engine:latest graphql-engine \
              --database-url postgres://username:password@host:5432/dbname \
                serve \
                --access-key XXXXXXXXXXXXXXXX
                --cors-domain https://mywebsite.com:8090
